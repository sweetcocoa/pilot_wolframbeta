from wolframbeta.nonterminals import *


from wolframbeta.tokenizer import TokenManager
# from wolframbeta.utils import *
import numpy as np

"""
밑 : 괄호, 상수, 단일항, 다항
지수 : 존재, 괄호, 상수, 단일항, 다항
"""
test_expressions = [
    "(3)^(2)",
    "(3)^(x)",
    "(3)^(3*x)",
    "(3^3)^x",
    "(3)^(x^2+x)",
    "(3)^(x^2+2*x)",
    "(x^2) + (x)*(x)",
    "2.7^x + (2.7^x) + (3*2.7^x)",
    "3*2.7^x + 3*2.7^(2*x)",
    "3*2.7^(2*x) + 2.7^(x^2)",
    "3*2.7^x + 3*2.7^(2*x) + 2.7^(x^2)",
    "2.7^x + (2.7^x) + (3*2.7^x) + 3*2.7^x + 3*2.7^(2*x) + 2.7^(x^2)",
    "2^(x*y)",
    "2^(x*y) * 2^(3*y)",
    "2^x + 3^x",
    "2^(x*y) * 2^(3*y) + (2^3)^y",
    "1 + 1",
    "1 * 1",
    "1 ^ 1",
    "1 - 1",
    "2 ^0.5",
    "-2 + 3",
    "1/3",
    "x/3",
    "(x)/3",
    "(x+1)/3",
    "(x)*(x)",
    "(x+1)*(x+1)/4",
    "(1-x)*(1+x)",
    "(x^1.4+1)*(x^1.4+1)",
    "2 ^ 3",
    "2 + 3 * 4",
    "2 * 3 + 4",
    "(2 + 3) * 4",
    "(2 + 3) * 4 / 2",
    "(2 + 3) * 4 / 2 / 2",
    "-(2 + 3) * 4 ^ 2 / 4",
    "-(2 + 3) * 4 ^ 2 / -4",
    "(3+2)*(3+2)",
    "(3+4^2)/3/2*6+7^2+9/2^2",
    "x + x",
    "5*x^2*y+2 + 2*x^2*y",
    "5*x^2*y+2 - 2*x^2*y",
    "pi + e",
    "(x^2 + x) + (x^2 + 3*x)",
    "x^2 + x",
    "e^x",
    " e^(2*x)",
    "(e^2)^x",
    "x^2 + x^2",
    "2^x + 2^x",
    "(e^2)^x + e^x",
    "(e^2)^x",
    "e^(2*x)",
    "e^(2*x) + (e^2)^x",
     "e^(2*x) + (e^2)^x + e^x",
    "(e^2)^x + e^x",
    "(x)^2",
    "x+y",
    "(x)^2^2 + x^4",
    "(x*y)^2 + x^2*y^2",
    "3^(x+1) + 3^x",
    "(x^2+x+1)^15",
    "(x+1)^2",
    "(x-1)^2",
    "(x+1)^0",
    "(x+y)^2",
    "(x+y+z)^2",
    "(x+y+1)^3",
    "(x^2+x+1)^1.58",
    "(3)^(x) + (3)^x",
    "(3)^(3*x) + (3)^x",
    "(3)^(3*x+2) + (3)^x",
    "(x+1)^0.5",
    "(x+1)^2",
    "(x^2+1)^2.5",
    "+x+x",
    "(x+x)^x",
    "1/x",
    "1/2",
    "x/5",
    "x^-1",
    "(x+1)^-1",
    "(3*x)^-1",
    "(2*x)^4",
    "x/y",
    "y/x",
    "(x+y)/3",
    "(x*y)^-1",
    "1/(x-3)",
    "(x-3)/(x-3)",
    "(x-3)^-2",
    "(x-2)^-2.55",
    "3*x/(x+1)",
    "(2*x-20)/(x-10)",
    "(x-10)/(x-10)",
    "(x-3)/(x-3)",
    "1/(x-3)*(x-3)",

]

for test_expression in test_expressions:
    token = TokenManager(test_expression)
    print(test_expression, end=' = ')
    expr = Expr(token)
    expr.parse()
    expr.calculate()
    print(expr.dict, end=' = ')
    res = expr.dict.calculate_variable({'x':3})
    print('$', res[0], res[1])
"""
(3)^(2) = 9 = $ 9 SUCCESS
(3)^(x) = 3^x = $ 27 SUCCESS
(3)^(3*x) = 27^x = $ 19683 SUCCESS
(3^3)^x = 27^x = $ 19683 SUCCESS
(3)^(x^2+x) = 3^(x^2+x) = $ 531441 SUCCESS
(3)^(x^2+2*x) = 3^(x^2+2*x) = $ 14348907 SUCCESS
(x^2) + (x)*(x) = 2*x^2 = $ 18 SUCCESS
2.7^x + (2.7^x) + (3*2.7^x) = 5*2.7^x = $ 98.41500000000002 SUCCESS
3*2.7^x + 3*2.7^(2*x) = 3*2.7^x+3*7.290000000000001^x = $ 1221.3104670000005 SUCCESS
3*2.7^(2*x) + 2.7^(x^2) = 3*7.290000000000001^x+2.7^x^2 = $ 8787.858951987006 SUCCESS
3*2.7^x + 3*2.7^(2*x) + 2.7^(x^2) = 3*2.7^x+3*7.290000000000001^x+2.7^x^2 = $ 8846.907951987007 SUCCESS
2.7^x + (2.7^x) + (3*2.7^x) + 3*2.7^x + 3*2.7^(2*x) + 2.7^(x^2) = 8*2.7^x+3*7.290000000000001^x+2.7^x^2 = $ 8945.322951987006 SUCCESS
2^(x*y) = 2^x*y = $ 8^y SUCCESS
2^(x*y) * 2^(3*y) = 2^x*y*8^y = $ 8^2*y SUCCESS
2^x + 3^x = 2^x+3^x = $ 35 SUCCESS
2^(x*y) * 2^(3*y) + (2^3)^y = 8^y+2^x*y*8^y = $ 8^2*y+8^y SUCCESS
1 + 1 = 2 = $ 2 SUCCESS
1 * 1 = 1 = $ 1 SUCCESS
1 ^ 1 = 1 = $ 1 SUCCESS
1 - 1 = 0 = $ 0 SUCCESS
2 ^0.5 = 1.4142135623730951 = $ 1.4142135623730951 SUCCESS
-2 + 3 = 1 = $ 1 SUCCESS
1/3 = 0.3333333333333333 = $ 0.3333333333333333 SUCCESS
x/3 = 0.3333333333333333*x = $ 1 SUCCESS
(x)/3 = 0.3333333333333333*x = $ 1 SUCCESS
(x+1)/3 = 0.3333333333333333*x+0.3333333333333333 = $ 1.3333333333333333 SUCCESS
(x)*(x) = x^2 = $ 9 SUCCESS
(x+1)*(x+1)/4 = 0.25*x^2+0.5*x+0.25 = $ 4 SUCCESS
(1-x)*(1+x) = -x^2+1 = $ -8 SUCCESS
(x^1.4+1)*(x^1.4+1) = x^2.8+2*x^1.4+1 = $ 31.98509561101838 SUCCESS
2 ^ 3 = 8 = $ 8 SUCCESS
2 + 3 * 4 = 14 = $ 14 SUCCESS
2 * 3 + 4 = 10 = $ 10 SUCCESS
(2 + 3) * 4 = 20 = $ 20 SUCCESS
(2 + 3) * 4 / 2 = 10 = $ 10 SUCCESS
(2 + 3) * 4 / 2 / 2 = 5 = $ 5 SUCCESS
-(2 + 3) * 4 ^ 2 / 4 = -20 = $ -20 SUCCESS
-(2 + 3) * 4 ^ 2 / -4 = 20 = $ 20 SUCCESS
(3+2)*(3+2) = 25 = $ 25 SUCCESS
(3+4^2)/3/2*6+7^2+9/2^2 = 70.25 = $ 70.25 SUCCESS
x + x = 2*x = $ 6 SUCCESS
5*x^2*y+2 + 2*x^2*y = 7*x^2*y+2 = $ 63*y+2 SUCCESS
5*x^2*y+2 - 2*x^2*y = 3*x^2*y+2 = $ 27*y+2 SUCCESS
pi + e = 5.859874482048838 = $ 5.859874482048838 SUCCESS
(x^2 + x) + (x^2 + 3*x) = 2*x^2+4*x = $ 30 SUCCESS
x^2 + x = x^2+x = $ 12 SUCCESS
e^x = 2.718281828459045^x = $ 20.085536923187664 SUCCESS
 e^(2*x) = 7.3890560989306495^x = $ 403.428793492735 SUCCESS
(e^2)^x = 7.3890560989306495^x = $ 403.428793492735 SUCCESS
x^2 + x^2 = 2*x^2 = $ 18 SUCCESS
2^x + 2^x = 2*2^x = $ 16 SUCCESS
(e^2)^x + e^x = 2.718281828459045^x+7.3890560989306495^x = $ 423.51433041592264 SUCCESS
(e^2)^x = 7.3890560989306495^x = $ 403.428793492735 SUCCESS
e^(2*x) = 7.3890560989306495^x = $ 403.428793492735 SUCCESS
e^(2*x) + (e^2)^x = 2*7.3890560989306495^x = $ 806.85758698547 SUCCESS
e^(2*x) + (e^2)^x + e^x = 2.718281828459045^x+2*7.3890560989306495^x = $ 826.9431239086576 SUCCESS
(e^2)^x + e^x = 2.718281828459045^x+7.3890560989306495^x = $ 423.51433041592264 SUCCESS
(x)^2 = x^2 = $ 9 SUCCESS
x+y = x+y = $ y+3 SUCCESS
(x)^2^2 + x^4 = 2*x^4 = $ 162 SUCCESS
(x*y)^2 + x^2*y^2 = 2*x^2*y^2 = $ 18*y^2 SUCCESS
3^(x+1) + 3^x = 3^x+3^(x+1) = $ 108 SUCCESS
(x^2+x+1)^15 = x^30+15*x^29+120*x^28+665*x^27+2835*x^26+9828*x^25+28665*x^24+71955*x^23+157950*x^22+306735*x^21+531531*x^20+827190*x^19+1161615*x^18+1477035*x^17+1704510*x^16+1787607*x^15+1704510*x^14+1477035*x^13+1161615*x^12+827190*x^11+531531*x^10+306735*x^9+157950*x^8+71955*x^7+28665*x^6+9828*x^5+2835*x^4+665*x^3+120*x^2+15*x+1 = $ 51185893014090757 SUCCESS
(x+1)^2 = x^2+2*x+1 = $ 16 SUCCESS
(x-1)^2 = x^2-2*x+1 = $ 4 SUCCESS
(x+1)^0 = 1 = $ 1 SUCCESS
(x+y)^2 = x^2+y^2+2*x*y = $ y^2+6*y+9 SUCCESS
(x+y+z)^2 = x^2+y^2+z^2+2*x*y+2*x*z+2*y*z = $ y^2+z^2+6*y+6*z+2*y*z+9 SUCCESS
(x+y+1)^3 = x^3+y^3+3*x^2+3*y^2+3*x+3*y+3*x*y^2+3*x^2*y+6*x*y+1 = $ y^3+12*y^2+48*y+64 SUCCESS
(x^2+x+1)^1.58 = (x^2+x+1)^1.58 = $ 57.54803467926634 SUCCESS
(3)^(x) + (3)^x = 2*3^x = $ 54 SUCCESS
(3)^(3*x) + (3)^x = 27^x+3^x = $ 19710 SUCCESS
(3)^(3*x+2) + (3)^x = 3^x+3^(3*x+2) = $ 177174 SUCCESS
(x+1)^0.5 = (x+1)^0.5 = $ 2 SUCCESS
(x+1)^2 = x^2+2*x+1 = $ 16 SUCCESS
(x^2+1)^2.5 = (x^2+1)^2.5 = $ 316.22776601683796 SUCCESS
+x+x = 2*x = $ 6 SUCCESS
(x+x)^x = 2^x*x^x = $ 216 SUCCESS
1/x = 1/x = $ 0.3333333333333333 SUCCESS
1/2 = 0.5 = $ 0.5 SUCCESS
x/5 = 0.2*x = $ 0.6000000000000001 SUCCESS
x^-1 = 1/x = $ 0.3333333333333333 SUCCESS
(x+1)^-1 = 1/(x+1) = $ 0.25 SUCCESS
(3*x)^-1 = 0.3333333333333333*1/x = $ 0.1111111111111111 SUCCESS
(2*x)^4 = 16*x^4 = $ 1296 SUCCESS
x/y = x*1/y = $ 3*1/y SUCCESS
y/x = 1/x*y = $ 0.3333333333333333*y SUCCESS
(x+y)/3 = 0.3333333333333333*x+0.3333333333333333*y = $ 0.3333333333333333*y+1 SUCCESS
(x*y)^-1 = 1/x*1/y = $ 0.3333333333333333*1/y SUCCESS
1/(x-3) = 1/(x-3) = $ 1 ZeroDivisionError
(x-3)/(x-3) = -3*1/(x-3)+1/(x-3)*x = $ 0 ZeroDivisionError
(x-3)^-2 = 1/(x-3)^2 = $ 0 ZeroDivisionError
(x-2)^-2.55 = 1/(x-2)^2.55 = $ 1 SUCCESS
3*x/(x+1) = 3*1/(x+1)*x = $ 2.25 SUCCESS
(2*x-20)/(x-10) = -20*1/(x-10)+2*1/(x-10)*x = $ 1.9999999999999996 SUCCESS
(x-10)/(x-10) = -10*1/(x-10)+1/(x-10)*x = $ 0.9999999999999998 SUCCESS
(x-3)/(x-3) = -3*1/(x-3)+1/(x-3)*x = $ 0 ZeroDivisionError
1/(x-3)*(x-3) = -3*1/(x-3)+1/(x-3)*x = $ 0 ZeroDivisionError
"""


# str_expressions = [
    # "(log(10,3))^(2)",
    # "(log(10,3))^(x)",
    # "(log(10,3))^(3*x)",
    # "(log(10,3))^(x^2+x)",
    # "(log(10,3))^(x^2+2*x)",
    # "(log(10,3))^2",
    # "(log(10,3))^x",
    # "log(10,3)^(2)",
    # "log(10,3)^(x)",
    # "log(10,3)^(3*x)",
    # "log(10,3)^(x^2+x)",
    # "log(10,3)^(x^2+2*x)",
    # "log(10,3)^2",
    # "log(10,3)^x",
    # "log(x+1,3)^x",
    # "log(x+1,3)^(x+1)",
    # "sqrt(x)",
    # "sqrt(x+1)",
    # "sqrt(x+y)",
    # "sqrt(log(9*x,3))",

# "cos(0.775)",
# "sec(0.5)",
# "sec(0.5)*cos(0.5)",
# "log(10,3)",
# "sin(sin(x+2))+sin(sin(x+2))",
# "(sin(3+y))",
# "sin(x+y+2)+(sin(3+y))",
# "sin(x+y+2)",
# "sin(x+y)+(sin(3+y))",
# "sin(x+y)*(sin(3+y)^2)",
# "sin(x+y)*(sin(3+y))^2",
# "log(x+x,2)",
# "log(5,2)^3",
# "log(5,2)^x",
# "sin(asin(0.9))",
# "-sin(asin(0.9))",
# "sin(x) + sin(x)",
# "sin(pi/3)",
# "sin(x) + sin(x)",
# "sin(x+2)+sin(x+2)",
# "sin(x+2)+sin(2+x)",
# "sin(pi/3)^3",
# "sin(pi/3)^3/2 + 1",


# ]
# for str_expression in str_expressions:
#     expr = Expr(str_expression)
#     expr.parse()
#     expr.calculate()
#     print(str_expression, ' = ', expr, ' = ', end = '')
#     print(dict(expr.similar_terms_dict), end=' = ')
#     print('$', expr.calculate_variable({'x': 3.0}))
#
